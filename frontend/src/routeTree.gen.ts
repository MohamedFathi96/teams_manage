/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as UnautherizedRouteImport } from './routes/_unautherized'
import { Route as AutherizedRouteImport } from './routes/_autherized'
import { Route as AutherizedIndexRouteImport } from './routes/_autherized/index'
import { Route as UnautherizedRegisterRouteImport } from './routes/_unautherized/register'
import { Route as UnautherizedLoginRouteImport } from './routes/_unautherized/login'
import { Route as AutherizedUsersRouteImport } from './routes/_autherized/users'
import { Route as AutherizedTasksRouteImport } from './routes/_autherized/tasks'
import { Route as AutherizedSettingsRouteImport } from './routes/_autherized/settings'

const UnautherizedRoute = UnautherizedRouteImport.update({
  id: '/_unautherized',
  getParentRoute: () => rootRouteImport,
} as any)
const AutherizedRoute = AutherizedRouteImport.update({
  id: '/_autherized',
  getParentRoute: () => rootRouteImport,
} as any)
const AutherizedIndexRoute = AutherizedIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AutherizedRoute,
} as any)
const UnautherizedRegisterRoute = UnautherizedRegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => UnautherizedRoute,
} as any)
const UnautherizedLoginRoute = UnautherizedLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => UnautherizedRoute,
} as any)
const AutherizedUsersRoute = AutherizedUsersRouteImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => AutherizedRoute,
} as any)
const AutherizedTasksRoute = AutherizedTasksRouteImport.update({
  id: '/tasks',
  path: '/tasks',
  getParentRoute: () => AutherizedRoute,
} as any)
const AutherizedSettingsRoute = AutherizedSettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => AutherizedRoute,
} as any)

export interface FileRoutesByFullPath {
  '/settings': typeof AutherizedSettingsRoute
  '/tasks': typeof AutherizedTasksRoute
  '/users': typeof AutherizedUsersRoute
  '/login': typeof UnautherizedLoginRoute
  '/register': typeof UnautherizedRegisterRoute
  '/': typeof AutherizedIndexRoute
}
export interface FileRoutesByTo {
  '/settings': typeof AutherizedSettingsRoute
  '/tasks': typeof AutherizedTasksRoute
  '/users': typeof AutherizedUsersRoute
  '/login': typeof UnautherizedLoginRoute
  '/register': typeof UnautherizedRegisterRoute
  '/': typeof AutherizedIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_autherized': typeof AutherizedRouteWithChildren
  '/_unautherized': typeof UnautherizedRouteWithChildren
  '/_autherized/settings': typeof AutherizedSettingsRoute
  '/_autherized/tasks': typeof AutherizedTasksRoute
  '/_autherized/users': typeof AutherizedUsersRoute
  '/_unautherized/login': typeof UnautherizedLoginRoute
  '/_unautherized/register': typeof UnautherizedRegisterRoute
  '/_autherized/': typeof AutherizedIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/settings' | '/tasks' | '/users' | '/login' | '/register' | '/'
  fileRoutesByTo: FileRoutesByTo
  to: '/settings' | '/tasks' | '/users' | '/login' | '/register' | '/'
  id:
    | '__root__'
    | '/_autherized'
    | '/_unautherized'
    | '/_autherized/settings'
    | '/_autherized/tasks'
    | '/_autherized/users'
    | '/_unautherized/login'
    | '/_unautherized/register'
    | '/_autherized/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AutherizedRoute: typeof AutherizedRouteWithChildren
  UnautherizedRoute: typeof UnautherizedRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_unautherized': {
      id: '/_unautherized'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof UnautherizedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_autherized': {
      id: '/_autherized'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AutherizedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_autherized/': {
      id: '/_autherized/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AutherizedIndexRouteImport
      parentRoute: typeof AutherizedRoute
    }
    '/_unautherized/register': {
      id: '/_unautherized/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof UnautherizedRegisterRouteImport
      parentRoute: typeof UnautherizedRoute
    }
    '/_unautherized/login': {
      id: '/_unautherized/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof UnautherizedLoginRouteImport
      parentRoute: typeof UnautherizedRoute
    }
    '/_autherized/users': {
      id: '/_autherized/users'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof AutherizedUsersRouteImport
      parentRoute: typeof AutherizedRoute
    }
    '/_autherized/tasks': {
      id: '/_autherized/tasks'
      path: '/tasks'
      fullPath: '/tasks'
      preLoaderRoute: typeof AutherizedTasksRouteImport
      parentRoute: typeof AutherizedRoute
    }
    '/_autherized/settings': {
      id: '/_autherized/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof AutherizedSettingsRouteImport
      parentRoute: typeof AutherizedRoute
    }
  }
}

interface AutherizedRouteChildren {
  AutherizedSettingsRoute: typeof AutherizedSettingsRoute
  AutherizedTasksRoute: typeof AutherizedTasksRoute
  AutherizedUsersRoute: typeof AutherizedUsersRoute
  AutherizedIndexRoute: typeof AutherizedIndexRoute
}

const AutherizedRouteChildren: AutherizedRouteChildren = {
  AutherizedSettingsRoute: AutherizedSettingsRoute,
  AutherizedTasksRoute: AutherizedTasksRoute,
  AutherizedUsersRoute: AutherizedUsersRoute,
  AutherizedIndexRoute: AutherizedIndexRoute,
}

const AutherizedRouteWithChildren = AutherizedRoute._addFileChildren(
  AutherizedRouteChildren,
)

interface UnautherizedRouteChildren {
  UnautherizedLoginRoute: typeof UnautherizedLoginRoute
  UnautherizedRegisterRoute: typeof UnautherizedRegisterRoute
}

const UnautherizedRouteChildren: UnautherizedRouteChildren = {
  UnautherizedLoginRoute: UnautherizedLoginRoute,
  UnautherizedRegisterRoute: UnautherizedRegisterRoute,
}

const UnautherizedRouteWithChildren = UnautherizedRoute._addFileChildren(
  UnautherizedRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  AutherizedRoute: AutherizedRouteWithChildren,
  UnautherizedRoute: UnautherizedRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
